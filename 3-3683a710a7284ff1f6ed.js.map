{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js","webpack:///../node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js"],"names":["module","exports","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","global","MapShim","Map","getIndex","arr","result","some","entry","index","anonymous","this","__entries__","prototypeAccessors","size","configurable","get","prototype","set","value","push","delete","entries","splice","has","clear","forEach","callback","ctx","list","call","defineProperties","isBrowser","window","document","global$1","Math","self","Function","requestAnimationFrame$1","requestAnimationFrame","bind","setTimeout","Date","now","trailingTimeout","transitionKeys","mutationObserverSupported","MutationObserver","ResizeObserverController","connected_","mutationEventsAdded_","mutationsObserver_","observers_","onTransitionEnd_","refresh","delay","leadingCall","trailingCall","lastCallTime","resolvePending","proxy","timeoutCallback","timeStamp","throttle","addObserver","observer","connect_","removeObserver","observers","disconnect_","updateObservers_","activeObservers","filter","gatherActive","hasActive","broadcastActive","addEventListener","observe","attributes","childList","characterData","subtree","removeEventListener","disconnect","ref","propertyName","getInstance","instance_","defineConfigurable","props","defineProperty","enumerable","writable","getWindowOf","ownerDocument","defaultView","emptyRect","createRectInit","toFloat","parseFloat","getBordersSize","styles","positions","len","arguments","reduce","position","getHTMLElementContentRect","clientWidth","clientHeight","getComputedStyle","paddings","getPaddings","horizPad","left","right","vertPad","top","bottom","width","height","boxSizing","round","documentElement","isDocumentElement","vertScrollbar","horizScrollbar","abs","isSVGGraphicsElement","SVGGraphicsElement","SVGElement","getBBox","getContentRect","bbox","getSVGContentRect","x","y","ResizeObservation","broadcastWidth","broadcastHeight","contentRect_","isActive","rect","broadcastRect","ResizeObserverEntry","rectInit","Constr","contentRect","DOMRectReadOnly","create","ResizeObserverSPI","controller","callbackCtx","activeObservations_","observations_","TypeError","callback_","controller_","callbackCtx_","Element","observations","unobserve","clearActive","this$1","observation","map","WeakMap","ResizeObserver","method","apply","__webpack_exports__"],"mappings":"2EAeAA,EAAAC,QAfA,SAAAC,EAAAC,GACA,SAAAD,EAAA,SACA,IAEAE,EAAAC,EAFAC,EAAA,GACAC,EAAAC,OAAAC,KAAAP,GAGA,IAAAG,EAAA,EAAaA,EAAAE,EAAAG,OAAuBL,IACpCD,EAAAG,EAAAF,GACAF,EAAAQ,QAAAP,IAAA,IACAE,EAAAF,GAAAF,EAAAE,IAGA,OAAAE,sCCZA,SAAAM,GAOA,IAAAC,EAAA,WACA,uBAAAC,IACA,OAAAA,IAUA,SAAAC,EAAAC,EAAAZ,GACA,IAAAa,GAAA,EAYA,OAVAD,EAAAE,KAAA,SAAAC,EAAAC,GACA,OAAAD,EAAA,KAAAf,IACAa,EAAAG,GAEA,KAMAH,EAGA,kBACA,SAAAI,IACAC,KAAAC,YAAA,GAGA,IAAAC,EAAA,CAAkCC,KAAA,CAAQC,cAAA,IAiF1C,OA5EAF,EAAAC,KAAAE,IAAA,WACA,OAAAL,KAAAC,YAAAb,QAOAW,EAAAO,UAAAD,IAAA,SAAAvB,GACA,IAAAgB,EAAAL,EAAAO,KAAAC,YAAAnB,GACAe,EAAAG,KAAAC,YAAAH,GAEA,OAAAD,KAAA,IAQAE,EAAAO,UAAAC,IAAA,SAAAzB,EAAA0B,GACA,IAAAV,EAAAL,EAAAO,KAAAC,YAAAnB,IAEAgB,EACAE,KAAAC,YAAAH,GAAA,GAAAU,EAEAR,KAAAC,YAAAQ,KAAA,CAAA3B,EAAA0B,KAQAT,EAAAO,UAAAI,OAAA,SAAA5B,GACA,IAAA6B,EAAAX,KAAAC,YACAH,EAAAL,EAAAkB,EAAA7B,IAEAgB,GACAa,EAAAC,OAAAd,EAAA,IAQAC,EAAAO,UAAAO,IAAA,SAAA/B,GACA,SAAAW,EAAAO,KAAAC,YAAAnB,IAMAiB,EAAAO,UAAAQ,MAAA,WACAd,KAAAC,YAAAW,OAAA,IAQAb,EAAAO,UAAAS,QAAA,SAAAC,EAAAC,QAEA,IAAAA,MAAA,MAEA,QAAAlC,EAAA,EAAAmC,EAHAlB,KAGAC,YAAsDlB,EAAAmC,EAAA9B,OAAiBL,GAAA,GACvE,IAAAc,EAAAqB,EAAAnC,GAEAiC,EAAAG,KAAAF,EAAApB,EAAA,GAAAA,EAAA,MAIAX,OAAAkC,iBAAArB,EAAAO,UAAAJ,GAEAH,EAtFA,GA5BA,GAyHAsB,EAAA,oBAAAC,QAAA,oBAAAC,UAAAD,OAAAC,oBAGAC,OACA,IAAAlC,KAAAmC,YACAnC,EAGA,oBAAAoC,WAAAD,YACAC,KAGA,oBAAAJ,eAAAG,YACAH,OAIAK,SAAA,cAAAA,GASAC,EACA,mBAAAC,sBAIAA,sBAAAC,KAAAN,GAGA,SAAAR,GAAgC,OAAAe,WAAA,WAAgC,OAAAf,EAAAgB,KAAAC,QAA+B,SAI/FC,EAAA,EAiFAC,EAAA,iEAGAC,EAAA,oBAAAC,iBAKAC,EAAA,WACAtC,KAAAuC,YAAA,EACAvC,KAAAwC,sBAAA,EACAxC,KAAAyC,mBAAA,KACAzC,KAAA0C,WAAA,GAEA1C,KAAA2C,iBAAA3C,KAAA2C,iBAAAb,KAAA9B,MACAA,KAAA4C,QAtFA,SAAA5B,EAAA6B,GACA,IAAAC,GAAA,EACAC,GAAA,EACAC,EAAA,EAQA,SAAAC,IACAH,IACAA,GAAA,EAEA9B,KAGA+B,GACAG,IAWA,SAAAC,IACAvB,EAAAqB,GAQA,SAAAC,IACA,IAAAE,EAAApB,KAAAC,MAEA,GAAAa,EAAA,CAEA,GAAAM,EAAAJ,EAAAd,EACA,OAOAa,GAAA,OAEAD,GAAA,EACAC,GAAA,EAEAhB,WAAAoB,EAAAN,GAGAG,EAAAI,EAGA,OAAAF,EAuBAG,CAAArD,KAAA4C,QAAAd,KAAA9B,MAnBA,KAgDAsC,EAAAhC,UAAAgD,YAAA,SAAAC,IACAvD,KAAA0C,WAAArD,QAAAkE,IACAvD,KAAA0C,WAAAjC,KAAA8C,GAIAvD,KAAAuC,YACAvC,KAAAwD,YAUAlB,EAAAhC,UAAAmD,eAAA,SAAAF,GACA,IAAAG,EAAA1D,KAAA0C,WACA5C,EAAA4D,EAAArE,QAAAkE,IAGAzD,GACA4D,EAAA9C,OAAAd,EAAA,IAIA4D,EAAAtE,QAAAY,KAAAuC,YACAvC,KAAA2D,eAUArB,EAAAhC,UAAAsC,QAAA,WACA5C,KAAA4D,oBAKA5D,KAAA4C,WAYAN,EAAAhC,UAAAsD,iBAAA,WAEA,IAAAC,EAAA7D,KAAA0C,WAAAoB,OAAA,SAAAP,GACA,OAAAA,EAAAQ,eAAAR,EAAAS,cAUA,OAFAH,EAAA9C,QAAA,SAAAwC,GAAiD,OAAAA,EAAAU,oBAEjDJ,EAAAzE,OAAA,GASAkD,EAAAhC,UAAAkD,SAAA,WAGAnC,IAAArB,KAAAuC,aAOAhB,SAAA2C,iBAAA,gBAAAlE,KAAA2C,kBAEArB,OAAA4C,iBAAA,SAAAlE,KAAA4C,SAEAR,GACApC,KAAAyC,mBAAA,IAAAJ,iBAAArC,KAAA4C,SAEA5C,KAAAyC,mBAAA0B,QAAA5C,SAAA,CACA6C,YAAA,EACAC,WAAA,EACAC,eAAA,EACAC,SAAA,MAGAhD,SAAA2C,iBAAA,qBAAAlE,KAAA4C,SAEA5C,KAAAwC,sBAAA,GAGAxC,KAAAuC,YAAA,IASAD,EAAAhC,UAAAqD,YAAA,WAGAtC,GAAArB,KAAAuC,aAIAhB,SAAAiD,oBAAA,gBAAAxE,KAAA2C,kBACArB,OAAAkD,oBAAA,SAAAxE,KAAA4C,SAEA5C,KAAAyC,oBACAzC,KAAAyC,mBAAAgC,aAGAzE,KAAAwC,sBACAjB,SAAAiD,oBAAA,qBAAAxE,KAAA4C,SAGA5C,KAAAyC,mBAAA,KACAzC,KAAAwC,sBAAA,EACAxC,KAAAuC,YAAA,IAUAD,EAAAhC,UAAAqC,iBAAA,SAAA+B,GACA,IAAAC,EAAAD,EAAAC,kBAA4C,IAAAA,MAAA,IAG5CxC,EAAAvC,KAAA,SAAAd,GACA,SAAA6F,EAAAtF,QAAAP,MAIAkB,KAAA4C,WASAN,EAAAsC,YAAA,WAKA,OAJA5E,KAAA6E,YACA7E,KAAA6E,UAAA,IAAAvC,GAGAtC,KAAA6E,WAGAvC,EAAAuC,UAAA,KASA,IAAAC,EAAA,SAAA9F,EAAA+F,GACA,QAAAhG,EAAA,EAAAmC,EAAAhC,OAAAC,KAAA4F,GAA8ChG,EAAAmC,EAAA9B,OAAiBL,GAAA,GAC/D,IAAAD,EAAAoC,EAAAnC,GAEAG,OAAA8F,eAAAhG,EAAAF,EAAA,CACA0B,MAAAuE,EAAAjG,GACAmG,YAAA,EACAC,UAAA,EACA9E,cAAA,IAIA,OAAApB,GASAmG,EAAA,SAAAnG,GAQA,OAJAA,KAAAoG,eAAApG,EAAAoG,cAAAC,aAIA7D,GAIA8D,EAAAC,EAAA,SAQA,SAAAC,EAAAhF,GACA,OAAAiF,WAAAjF,IAAA,EAUA,SAAAkF,EAAAC,GAEA,IADA,IAAAC,EAAA,GAAAC,EAAAC,UAAA1G,OAAA,EACAyG,KAAA,GAAAD,EAAAC,GAAAC,UAAAD,EAAA,GAEA,OAAAD,EAAAG,OAAA,SAAA5F,EAAA6F,GAGA,OAAA7F,EAAAqF,EAFAG,EAAA,UAAAK,EAAA,YAGK,GA2CL,SAAAC,EAAAjH,GAGA,IAAAkH,EAAAlH,EAAAkH,YACAC,EAAAnH,EAAAmH,aAUA,IAAAD,IAAAC,EACA,OAAAb,EAGA,IAAAK,EAAAR,EAAAnG,GAAAoH,iBAAApH,GACAqH,EArDA,SAAAV,GAIA,IAHA,IACAU,EAAA,GAEAtH,EAAA,EAAAmC,EAHA,gCAGqCnC,EAAAmC,EAAA9B,OAAiBL,GAAA,GACtD,IAAAiH,EAAA9E,EAAAnC,GAEAyB,EAAAmF,EAAA,WAAAK,GAEAK,EAAAL,GAAAR,EAAAhF,GAGA,OAAA6F,EAyCAC,CAAAX,GACAY,EAAAF,EAAAG,KAAAH,EAAAI,MACAC,EAAAL,EAAAM,IAAAN,EAAAO,OAMAC,EAAArB,EAAAG,EAAAkB,OACAC,EAAAtB,EAAAG,EAAAmB,QAwBA,GApBA,eAAAnB,EAAAoB,YAOAtF,KAAAuF,MAAAH,EAAAN,KAAAL,IACAW,GAAAnB,EAAAC,EAAA,gBAAAY,GAGA9E,KAAAuF,MAAAF,EAAAJ,KAAAP,IACAW,GAAApB,EAAAC,EAAA,gBAAAe,KA0DA,SAAA1H,GACA,OAAAA,IAAAmG,EAAAnG,GAAAuC,SAAA0F,gBAnDAC,CAAAlI,GAAA,CAKA,IAAAmI,EAAA1F,KAAAuF,MAAAH,EAAAN,GAAAL,EACAkB,EAAA3F,KAAAuF,MAAAF,EAAAJ,GAAAP,EAOA,IAAA1E,KAAA4F,IAAAF,KACAN,GAAAM,GAGA,IAAA1F,KAAA4F,IAAAD,KACAN,GAAAM,GAIA,OAAA7B,EAAAc,EAAAG,KAAAH,EAAAM,IAAAE,EAAAC,GASA,IAAAQ,EAGA,oBAAAC,mBACA,SAAAvI,GAAkC,OAAAA,aAAAmG,EAAAnG,GAAAuI,oBAMlC,SAAAvI,GAA8B,OAAAA,aAAAmG,EAAAnG,GAAAwI,YAAA,mBAAAxI,EAAAyI,SAmB9B,SAAAC,EAAA1I,GACA,OAAAqC,EAIAiG,EAAAtI,GAjIA,SAAAA,GACA,IAAA2I,EAAA3I,EAAAyI,UAEA,OAAAlC,EAAA,IAAAoC,EAAAd,MAAAc,EAAAb,QA+HAc,CAAA5I,GAGAiH,EAAAjH,GAPAsG,EAiDA,SAAAC,EAAAsC,EAAAC,EAAAjB,EAAAC,GACA,OAAYe,IAAAC,IAAAjB,QAAAC,UAOZ,IAAAiB,EAAA,SAAA/I,GACAgB,KAAAgI,eAAA,EACAhI,KAAAiI,gBAAA,EACAjI,KAAAkI,aAAA3C,EAAA,SAEAvF,KAAAhB,UAuBA+I,EAAAzH,UAAA6H,SAAA,WACA,IAAAC,EAAAV,EAAA1H,KAAAhB,QAIA,OAFAgB,KAAAkI,aAAAE,EAEAA,EAAAvB,QAAA7G,KAAAgI,gBAAAI,EAAAtB,SAAA9G,KAAAiI,iBASAF,EAAAzH,UAAA+H,cAAA,WACA,IAAAD,EAAApI,KAAAkI,aAKA,OAHAlI,KAAAgI,eAAAI,EAAAvB,MACA7G,KAAAiI,gBAAAG,EAAAtB,OAEAsB,GAGA,IAAAE,EAAA,SAAAtJ,EAAAuJ,GACA,IA5FA7D,EACAmD,EACAC,EACAjB,EACAC,EAGA0B,EACAJ,EAoFAK,GA3FAZ,GADAnD,EA4FA6D,GA3FAV,EACAC,EAAApD,EAAAoD,EACAjB,EAAAnC,EAAAmC,MACAC,EAAApC,EAAAoC,OAGA0B,EAAA,oBAAAE,gCAAAxJ,OACAkJ,EAAAlJ,OAAAyJ,OAAAH,EAAAlI,WAGAwE,EAAAsD,EAAA,CACAP,IAAAC,IAAAjB,QAAAC,SACAH,IAAAmB,EACArB,MAAAoB,EAAAhB,EACAD,OAAAE,EAAAgB,EACAtB,KAAAqB,IAGAO,GAiFAtD,EAAA9E,KAAA,CAA8BhB,SAAAyJ,iBAG9BG,EAAA,SAAA5H,EAAA6H,EAAAC,GAIA,GAHA9I,KAAA+I,oBAAA,GACA/I,KAAAgJ,cAAA,IAAAzJ,EAEA,mBAAAyB,EACA,UAAAiI,UAAA,2DAGAjJ,KAAAkJ,UAAAlI,EACAhB,KAAAmJ,YAAAN,EACA7I,KAAAoJ,aAAAN,GA+BAF,EAAAtI,UAAA6D,QAAA,SAAAnF,GACA,IAAA8G,UAAA1G,OACA,UAAA6J,UAAA,4CAIA,uBAAAI,4BAAAnK,OAAA,CAIA,KAAAF,aAAAmG,EAAAnG,GAAAqK,SACA,UAAAJ,UAAA,yCAGA,IAAAK,EAAAtJ,KAAAgJ,cAGAM,EAAAzI,IAAA7B,KAIAsK,EAAA/I,IAAAvB,EAAA,IAAA+I,EAAA/I,IAEAgB,KAAAmJ,YAAA7F,YAAAtD,MAGAA,KAAAmJ,YAAAvG,aASAgG,EAAAtI,UAAAiJ,UAAA,SAAAvK,GACA,IAAA8G,UAAA1G,OACA,UAAA6J,UAAA,4CAIA,uBAAAI,4BAAAnK,OAAA,CAIA,KAAAF,aAAAmG,EAAAnG,GAAAqK,SACA,UAAAJ,UAAA,yCAGA,IAAAK,EAAAtJ,KAAAgJ,cAGAM,EAAAzI,IAAA7B,KAIAsK,EAAA5I,OAAA1B,GAEAsK,EAAAnJ,MACAH,KAAAmJ,YAAA1F,eAAAzD,SASA4I,EAAAtI,UAAAmE,WAAA,WACAzE,KAAAwJ,cACAxJ,KAAAgJ,cAAAlI,QACAd,KAAAmJ,YAAA1F,eAAAzD,OASA4I,EAAAtI,UAAAyD,aAAA,WACA,IAAA0F,EAAAzJ,KAEAA,KAAAwJ,cAEAxJ,KAAAgJ,cAAAjI,QAAA,SAAA2I,GACAA,EAAAvB,YACAsB,EAAAV,oBAAAtI,KAAAiJ,MAWAd,EAAAtI,UAAA2D,gBAAA,WAEA,GAAAjE,KAAAgE,YAAA,CAIA,IAAA/C,EAAAjB,KAAAoJ,aAGAzI,EAAAX,KAAA+I,oBAAAY,IAAA,SAAAD,GACA,WAAApB,EAAAoB,EAAA1K,OAAA0K,EAAArB,mBAGArI,KAAAkJ,UAAA/H,KAAAF,EAAAN,EAAAM,GACAjB,KAAAwJ,gBAQAZ,EAAAtI,UAAAkJ,YAAA,WACAxJ,KAAA+I,oBAAAnI,OAAA,IAQAgI,EAAAtI,UAAA0D,UAAA,WACA,OAAAhE,KAAA+I,oBAAA3J,OAAA,GAMA,IAAAsE,EAAA,oBAAAkG,QAAA,IAAAA,QAAA,IAAArK,EAMAsK,EAAA,SAAA7I,GACA,KAAAhB,gBAAA6J,GACA,UAAAZ,UAAA,sCAEA,IAAAnD,UAAA1G,OACA,UAAA6J,UAAA,4CAGA,IAAAJ,EAAAvG,EAAAsC,cACArB,EAAA,IAAAqF,EAAA5H,EAAA6H,EAAA7I,MAEA0D,EAAAnD,IAAAP,KAAAuD,IAIA,qCAAAxC,QAAA,SAAA+I,GACAD,EAAAvJ,UAAAwJ,GAAA,WACA,OAAApF,EAAAhB,EAAArD,IAAAL,OAAA8J,GAAAC,MAAArF,EAAAoB,WACA,IAAApB,KAIA,IAAA5E,OAEA,IAAA0B,EAAAqI,eACArI,EAAAqI,eAGAA,EAGeG,EAAA","file":"3-3683a710a7284ff1f6ed.js","sourcesContent":["function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose;","/**\r\n * A collection of shims that provide minimal functionality of the ES6 collections.\r\n *\r\n * These implementations are not meant to be used outside of the ResizeObserver\r\n * modules as they cover only a limited range of use cases.\r\n */\n/* eslint-disable require-jsdoc, valid-jsdoc */\nvar MapShim = (function () {\n    if (typeof Map !== 'undefined') {\n        return Map;\n    }\n\n    /**\r\n     * Returns index in provided array that matches the specified key.\r\n     *\r\n     * @param {Array<Array>} arr\r\n     * @param {*} key\r\n     * @returns {number}\r\n     */\n    function getIndex(arr, key) {\n        var result = -1;\n\n        arr.some(function (entry, index) {\n            if (entry[0] === key) {\n                result = index;\n\n                return true;\n            }\n\n            return false;\n        });\n\n        return result;\n    }\n\n    return (function () {\n        function anonymous() {\n            this.__entries__ = [];\n        }\n\n        var prototypeAccessors = { size: { configurable: true } };\n\n        /**\r\n         * @returns {boolean}\r\n         */\n        prototypeAccessors.size.get = function () {\n            return this.__entries__.length;\n        };\n\n        /**\r\n         * @param {*} key\r\n         * @returns {*}\r\n         */\n        anonymous.prototype.get = function (key) {\n            var index = getIndex(this.__entries__, key);\n            var entry = this.__entries__[index];\n\n            return entry && entry[1];\n        };\n\n        /**\r\n         * @param {*} key\r\n         * @param {*} value\r\n         * @returns {void}\r\n         */\n        anonymous.prototype.set = function (key, value) {\n            var index = getIndex(this.__entries__, key);\n\n            if (~index) {\n                this.__entries__[index][1] = value;\n            } else {\n                this.__entries__.push([key, value]);\n            }\n        };\n\n        /**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */\n        anonymous.prototype.delete = function (key) {\n            var entries = this.__entries__;\n            var index = getIndex(entries, key);\n\n            if (~index) {\n                entries.splice(index, 1);\n            }\n        };\n\n        /**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */\n        anonymous.prototype.has = function (key) {\n            return !!~getIndex(this.__entries__, key);\n        };\n\n        /**\r\n         * @returns {void}\r\n         */\n        anonymous.prototype.clear = function () {\n            this.__entries__.splice(0);\n        };\n\n        /**\r\n         * @param {Function} callback\r\n         * @param {*} [ctx=null]\r\n         * @returns {void}\r\n         */\n        anonymous.prototype.forEach = function (callback, ctx) {\n            var this$1 = this;\n            if ( ctx === void 0 ) ctx = null;\n\n            for (var i = 0, list = this$1.__entries__; i < list.length; i += 1) {\n                var entry = list[i];\n\n                callback.call(ctx, entry[1], entry[0]);\n            }\n        };\n\n        Object.defineProperties( anonymous.prototype, prototypeAccessors );\n\n        return anonymous;\n    }());\n})();\n\n/**\r\n * Detects whether window and document objects are available in current environment.\r\n */\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;\n\n// Returns global object of a current environment.\nvar global$1 = (function () {\n    if (typeof global !== 'undefined' && global.Math === Math) {\n        return global;\n    }\n\n    if (typeof self !== 'undefined' && self.Math === Math) {\n        return self;\n    }\n\n    if (typeof window !== 'undefined' && window.Math === Math) {\n        return window;\n    }\n\n    // eslint-disable-next-line no-new-func\n    return Function('return this')();\n})();\n\n/**\r\n * A shim for the requestAnimationFrame which falls back to the setTimeout if\r\n * first one is not supported.\r\n *\r\n * @returns {number} Requests' identifier.\r\n */\nvar requestAnimationFrame$1 = (function () {\n    if (typeof requestAnimationFrame === 'function') {\n        // It's required to use a bounded function because IE sometimes throws\n        // an \"Invalid calling object\" error if rAF is invoked without the global\n        // object on the left hand side.\n        return requestAnimationFrame.bind(global$1);\n    }\n\n    return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };\n})();\n\n// Defines minimum timeout before adding a trailing call.\nvar trailingTimeout = 2;\n\n/**\r\n * Creates a wrapper function which ensures that provided callback will be\r\n * invoked only once during the specified delay period.\r\n *\r\n * @param {Function} callback - Function to be invoked after the delay period.\r\n * @param {number} delay - Delay after which to invoke callback.\r\n * @returns {Function}\r\n */\nvar throttle = function (callback, delay) {\n    var leadingCall = false,\n        trailingCall = false,\n        lastCallTime = 0;\n\n    /**\r\n     * Invokes the original callback function and schedules new invocation if\r\n     * the \"proxy\" was called during current request.\r\n     *\r\n     * @returns {void}\r\n     */\n    function resolvePending() {\n        if (leadingCall) {\n            leadingCall = false;\n\n            callback();\n        }\n\n        if (trailingCall) {\n            proxy();\n        }\n    }\n\n    /**\r\n     * Callback invoked after the specified delay. It will further postpone\r\n     * invocation of the original function delegating it to the\r\n     * requestAnimationFrame.\r\n     *\r\n     * @returns {void}\r\n     */\n    function timeoutCallback() {\n        requestAnimationFrame$1(resolvePending);\n    }\n\n    /**\r\n     * Schedules invocation of the original function.\r\n     *\r\n     * @returns {void}\r\n     */\n    function proxy() {\n        var timeStamp = Date.now();\n\n        if (leadingCall) {\n            // Reject immediately following calls.\n            if (timeStamp - lastCallTime < trailingTimeout) {\n                return;\n            }\n\n            // Schedule new call to be in invoked when the pending one is resolved.\n            // This is important for \"transitions\" which never actually start\n            // immediately so there is a chance that we might miss one if change\n            // happens amids the pending invocation.\n            trailingCall = true;\n        } else {\n            leadingCall = true;\n            trailingCall = false;\n\n            setTimeout(timeoutCallback, delay);\n        }\n\n        lastCallTime = timeStamp;\n    }\n\n    return proxy;\n};\n\n// Minimum delay before invoking the update of observers.\nvar REFRESH_DELAY = 20;\n\n// A list of substrings of CSS properties used to find transition events that\n// might affect dimensions of observed elements.\nvar transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];\n\n// Check if MutationObserver is available.\nvar mutationObserverSupported = typeof MutationObserver !== 'undefined';\n\n/**\r\n * Singleton controller class which handles updates of ResizeObserver instances.\r\n */\nvar ResizeObserverController = function() {\n    this.connected_ = false;\n    this.mutationEventsAdded_ = false;\n    this.mutationsObserver_ = null;\n    this.observers_ = [];\n\n    this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);\n    this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);\n};\n\n/**\r\n * Adds observer to observers list.\r\n *\r\n * @param {ResizeObserverSPI} observer - Observer to be added.\r\n * @returns {void}\r\n */\n\n\n/**\r\n * Holds reference to the controller's instance.\r\n *\r\n * @private {ResizeObserverController}\r\n */\n\n\n/**\r\n * Keeps reference to the instance of MutationObserver.\r\n *\r\n * @private {MutationObserver}\r\n */\n\n/**\r\n * Indicates whether DOM listeners have been added.\r\n *\r\n * @private {boolean}\r\n */\nResizeObserverController.prototype.addObserver = function (observer) {\n    if (!~this.observers_.indexOf(observer)) {\n        this.observers_.push(observer);\n    }\n\n    // Add listeners if they haven't been added yet.\n    if (!this.connected_) {\n        this.connect_();\n    }\n};\n\n/**\r\n * Removes observer from observers list.\r\n *\r\n * @param {ResizeObserverSPI} observer - Observer to be removed.\r\n * @returns {void}\r\n */\nResizeObserverController.prototype.removeObserver = function (observer) {\n    var observers = this.observers_;\n    var index = observers.indexOf(observer);\n\n    // Remove observer if it's present in registry.\n    if (~index) {\n        observers.splice(index, 1);\n    }\n\n    // Remove listeners if controller has no connected observers.\n    if (!observers.length && this.connected_) {\n        this.disconnect_();\n    }\n};\n\n/**\r\n * Invokes the update of observers. It will continue running updates insofar\r\n * it detects changes.\r\n *\r\n * @returns {void}\r\n */\nResizeObserverController.prototype.refresh = function () {\n    var changesDetected = this.updateObservers_();\n\n    // Continue running updates if changes have been detected as there might\n    // be future ones caused by CSS transitions.\n    if (changesDetected) {\n        this.refresh();\n    }\n};\n\n/**\r\n * Updates every observer from observers list and notifies them of queued\r\n * entries.\r\n *\r\n * @private\r\n * @returns {boolean} Returns \"true\" if any observer has detected changes in\r\n *  dimensions of it's elements.\r\n */\nResizeObserverController.prototype.updateObservers_ = function () {\n    // Collect observers that have active observations.\n    var activeObservers = this.observers_.filter(function (observer) {\n        return observer.gatherActive(), observer.hasActive();\n    });\n\n    // Deliver notifications in a separate cycle in order to avoid any\n    // collisions between observers, e.g. when multiple instances of\n    // ResizeObserver are tracking the same element and the callback of one\n    // of them changes content dimensions of the observed target. Sometimes\n    // this may result in notifications being blocked for the rest of observers.\n    activeObservers.forEach(function (observer) { return observer.broadcastActive(); });\n\n    return activeObservers.length > 0;\n};\n\n/**\r\n * Initializes DOM listeners.\r\n *\r\n * @private\r\n * @returns {void}\r\n */\nResizeObserverController.prototype.connect_ = function () {\n    // Do nothing if running in a non-browser environment or if listeners\n    // have been already added.\n    if (!isBrowser || this.connected_) {\n        return;\n    }\n\n    // Subscription to the \"Transitionend\" event is used as a workaround for\n    // delayed transitions. This way it's possible to capture at least the\n    // final state of an element.\n    document.addEventListener('transitionend', this.onTransitionEnd_);\n\n    window.addEventListener('resize', this.refresh);\n\n    if (mutationObserverSupported) {\n        this.mutationsObserver_ = new MutationObserver(this.refresh);\n\n        this.mutationsObserver_.observe(document, {\n            attributes: true,\n            childList: true,\n            characterData: true,\n            subtree: true\n        });\n    } else {\n        document.addEventListener('DOMSubtreeModified', this.refresh);\n\n        this.mutationEventsAdded_ = true;\n    }\n\n    this.connected_ = true;\n};\n\n/**\r\n * Removes DOM listeners.\r\n *\r\n * @private\r\n * @returns {void}\r\n */\nResizeObserverController.prototype.disconnect_ = function () {\n    // Do nothing if running in a non-browser environment or if listeners\n    // have been already removed.\n    if (!isBrowser || !this.connected_) {\n        return;\n    }\n\n    document.removeEventListener('transitionend', this.onTransitionEnd_);\n    window.removeEventListener('resize', this.refresh);\n\n    if (this.mutationsObserver_) {\n        this.mutationsObserver_.disconnect();\n    }\n\n    if (this.mutationEventsAdded_) {\n        document.removeEventListener('DOMSubtreeModified', this.refresh);\n    }\n\n    this.mutationsObserver_ = null;\n    this.mutationEventsAdded_ = false;\n    this.connected_ = false;\n};\n\n/**\r\n * \"Transitionend\" event handler.\r\n *\r\n * @private\r\n * @param {TransitionEvent} event\r\n * @returns {void}\r\n */\nResizeObserverController.prototype.onTransitionEnd_ = function (ref) {\n        var propertyName = ref.propertyName; if ( propertyName === void 0 ) propertyName = '';\n\n    // Detect whether transition may affect dimensions of an element.\n    var isReflowProperty = transitionKeys.some(function (key) {\n        return !!~propertyName.indexOf(key);\n    });\n\n    if (isReflowProperty) {\n        this.refresh();\n    }\n};\n\n/**\r\n * Returns instance of the ResizeObserverController.\r\n *\r\n * @returns {ResizeObserverController}\r\n */\nResizeObserverController.getInstance = function () {\n    if (!this.instance_) {\n        this.instance_ = new ResizeObserverController();\n    }\n\n    return this.instance_;\n};\n\nResizeObserverController.instance_ = null;\n\n/**\r\n * Defines non-writable/enumerable properties of the provided target object.\r\n *\r\n * @param {Object} target - Object for which to define properties.\r\n * @param {Object} props - Properties to be defined.\r\n * @returns {Object} Target object.\r\n */\nvar defineConfigurable = (function (target, props) {\n    for (var i = 0, list = Object.keys(props); i < list.length; i += 1) {\n        var key = list[i];\n\n        Object.defineProperty(target, key, {\n            value: props[key],\n            enumerable: false,\n            writable: false,\n            configurable: true\n        });\n    }\n\n    return target;\n});\n\n/**\r\n * Returns the global object associated with provided element.\r\n *\r\n * @param {Object} target\r\n * @returns {Object}\r\n */\nvar getWindowOf = (function (target) {\n    // Assume that the element is an instance of Node, which means that it\n    // has the \"ownerDocument\" property from which we can retrieve a\n    // corresponding global object.\n    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;\n\n    // Return the local global object if it's not possible extract one from\n    // provided element.\n    return ownerGlobal || global$1;\n});\n\n// Placeholder of an empty content rectangle.\nvar emptyRect = createRectInit(0, 0, 0, 0);\n\n/**\r\n * Converts provided string to a number.\r\n *\r\n * @param {number|string} value\r\n * @returns {number}\r\n */\nfunction toFloat(value) {\n    return parseFloat(value) || 0;\n}\n\n/**\r\n * Extracts borders size from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @param {...string} positions - Borders positions (top, right, ...)\r\n * @returns {number}\r\n */\nfunction getBordersSize(styles) {\n    var positions = [], len = arguments.length - 1;\n    while ( len-- > 0 ) positions[ len ] = arguments[ len + 1 ];\n\n    return positions.reduce(function (size, position) {\n        var value = styles['border-' + position + '-width'];\n\n        return size + toFloat(value);\n    }, 0);\n}\n\n/**\r\n * Extracts paddings sizes from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @returns {Object} Paddings box.\r\n */\nfunction getPaddings(styles) {\n    var positions = ['top', 'right', 'bottom', 'left'];\n    var paddings = {};\n\n    for (var i = 0, list = positions; i < list.length; i += 1) {\n        var position = list[i];\n\n        var value = styles['padding-' + position];\n\n        paddings[position] = toFloat(value);\n    }\n\n    return paddings;\n}\n\n/**\r\n * Calculates content rectangle of provided SVG element.\r\n *\r\n * @param {SVGGraphicsElement} target - Element content rectangle of which needs\r\n *      to be calculated.\r\n * @returns {DOMRectInit}\r\n */\nfunction getSVGContentRect(target) {\n    var bbox = target.getBBox();\n\n    return createRectInit(0, 0, bbox.width, bbox.height);\n}\n\n/**\r\n * Calculates content rectangle of provided HTMLElement.\r\n *\r\n * @param {HTMLElement} target - Element for which to calculate the content rectangle.\r\n * @returns {DOMRectInit}\r\n */\nfunction getHTMLElementContentRect(target) {\n    // Client width & height properties can't be\n    // used exclusively as they provide rounded values.\n    var clientWidth = target.clientWidth;\n    var clientHeight = target.clientHeight;\n\n    // By this condition we can catch all non-replaced inline, hidden and\n    // detached elements. Though elements with width & height properties less\n    // than 0.5 will be discarded as well.\n    //\n    // Without it we would need to implement separate methods for each of\n    // those cases and it's not possible to perform a precise and performance\n    // effective test for hidden elements. E.g. even jQuery's ':visible' filter\n    // gives wrong results for elements with width & height less than 0.5.\n    if (!clientWidth && !clientHeight) {\n        return emptyRect;\n    }\n\n    var styles = getWindowOf(target).getComputedStyle(target);\n    var paddings = getPaddings(styles);\n    var horizPad = paddings.left + paddings.right;\n    var vertPad = paddings.top + paddings.bottom;\n\n    // Computed styles of width & height are being used because they are the\n    // only dimensions available to JS that contain non-rounded values. It could\n    // be possible to utilize the getBoundingClientRect if only it's data wasn't\n    // affected by CSS transformations let alone paddings, borders and scroll bars.\n    var width = toFloat(styles.width),\n        height = toFloat(styles.height);\n\n    // Width & height include paddings and borders when the 'border-box' box\n    // model is applied (except for IE).\n    if (styles.boxSizing === 'border-box') {\n        // Following conditions are required to handle Internet Explorer which\n        // doesn't include paddings and borders to computed CSS dimensions.\n        //\n        // We can say that if CSS dimensions + paddings are equal to the \"client\"\n        // properties then it's either IE, and thus we don't need to subtract\n        // anything, or an element merely doesn't have paddings/borders styles.\n        if (Math.round(width + horizPad) !== clientWidth) {\n            width -= getBordersSize(styles, 'left', 'right') + horizPad;\n        }\n\n        if (Math.round(height + vertPad) !== clientHeight) {\n            height -= getBordersSize(styles, 'top', 'bottom') + vertPad;\n        }\n    }\n\n    // Following steps can't be applied to the document's root element as its\n    // client[Width/Height] properties represent viewport area of the window.\n    // Besides, it's as well not necessary as the <html> itself neither has\n    // rendered scroll bars nor it can be clipped.\n    if (!isDocumentElement(target)) {\n        // In some browsers (only in Firefox, actually) CSS width & height\n        // include scroll bars size which can be removed at this step as scroll\n        // bars are the only difference between rounded dimensions + paddings\n        // and \"client\" properties, though that is not always true in Chrome.\n        var vertScrollbar = Math.round(width + horizPad) - clientWidth;\n        var horizScrollbar = Math.round(height + vertPad) - clientHeight;\n\n        // Chrome has a rather weird rounding of \"client\" properties.\n        // E.g. for an element with content width of 314.2px it sometimes gives\n        // the client width of 315px and for the width of 314.7px it may give\n        // 314px. And it doesn't happen all the time. So just ignore this delta\n        // as a non-relevant.\n        if (Math.abs(vertScrollbar) !== 1) {\n            width -= vertScrollbar;\n        }\n\n        if (Math.abs(horizScrollbar) !== 1) {\n            height -= horizScrollbar;\n        }\n    }\n\n    return createRectInit(paddings.left, paddings.top, width, height);\n}\n\n/**\r\n * Checks whether provided element is an instance of the SVGGraphicsElement.\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\nvar isSVGGraphicsElement = (function () {\n    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\n    // interface.\n    if (typeof SVGGraphicsElement !== 'undefined') {\n        return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };\n    }\n\n    // If it's so, then check that element is at least an instance of the\n    // SVGElement and that it has the \"getBBox\" method.\n    // eslint-disable-next-line no-extra-parens\n    return function (target) { return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === 'function'; };\n})();\n\n/**\r\n * Checks whether provided element is a document element (<html>).\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\nfunction isDocumentElement(target) {\n    return target === getWindowOf(target).document.documentElement;\n}\n\n/**\r\n * Calculates an appropriate content rectangle for provided html or svg element.\r\n *\r\n * @param {Element} target - Element content rectangle of which needs to be calculated.\r\n * @returns {DOMRectInit}\r\n */\nfunction getContentRect(target) {\n    if (!isBrowser) {\n        return emptyRect;\n    }\n\n    if (isSVGGraphicsElement(target)) {\n        return getSVGContentRect(target);\n    }\n\n    return getHTMLElementContentRect(target);\n}\n\n/**\r\n * Creates rectangle with an interface of the DOMRectReadOnly.\r\n * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\r\n *\r\n * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\r\n * @returns {DOMRectReadOnly}\r\n */\nfunction createReadOnlyRect(ref) {\n    var x = ref.x;\n    var y = ref.y;\n    var width = ref.width;\n    var height = ref.height;\n\n    // If DOMRectReadOnly is available use it as a prototype for the rectangle.\n    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;\n    var rect = Object.create(Constr.prototype);\n\n    // Rectangle's properties are not writable and non-enumerable.\n    defineConfigurable(rect, {\n        x: x, y: y, width: width, height: height,\n        top: y,\n        right: x + width,\n        bottom: height + y,\n        left: x\n    });\n\n    return rect;\n}\n\n/**\r\n * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\r\n * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\r\n *\r\n * @param {number} x - X coordinate.\r\n * @param {number} y - Y coordinate.\r\n * @param {number} width - Rectangle's width.\r\n * @param {number} height - Rectangle's height.\r\n * @returns {DOMRectInit}\r\n */\nfunction createRectInit(x, y, width, height) {\n    return { x: x, y: y, width: width, height: height };\n}\n\n/**\r\n * Class that is responsible for computations of the content rectangle of\r\n * provided DOM element and for keeping track of it's changes.\r\n */\nvar ResizeObservation = function(target) {\n    this.broadcastWidth = 0;\n    this.broadcastHeight = 0;\n    this.contentRect_ = createRectInit(0, 0, 0, 0);\n\n    this.target = target;\n};\n\n/**\r\n * Updates content rectangle and tells whether it's width or height properties\r\n * have changed since the last broadcast.\r\n *\r\n * @returns {boolean}\r\n */\n\n\n/**\r\n * Reference to the last observed content rectangle.\r\n *\r\n * @private {DOMRectInit}\r\n */\n\n\n/**\r\n * Broadcasted width of content rectangle.\r\n *\r\n * @type {number}\r\n */\nResizeObservation.prototype.isActive = function () {\n    var rect = getContentRect(this.target);\n\n    this.contentRect_ = rect;\n\n    return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;\n};\n\n/**\r\n * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\r\n * from the corresponding properties of the last observed content rectangle.\r\n *\r\n * @returns {DOMRectInit} Last observed content rectangle.\r\n */\nResizeObservation.prototype.broadcastRect = function () {\n    var rect = this.contentRect_;\n\n    this.broadcastWidth = rect.width;\n    this.broadcastHeight = rect.height;\n\n    return rect;\n};\n\nvar ResizeObserverEntry = function(target, rectInit) {\n    var contentRect = createReadOnlyRect(rectInit);\n\n    // According to the specification following properties are not writable\n    // and are also not enumerable in the native implementation.\n    //\n    // Property accessors are not being used as they'd require to define a\n    // private WeakMap storage which may cause memory leaks in browsers that\n    // don't support this type of collections.\n    defineConfigurable(this, { target: target, contentRect: contentRect });\n};\n\nvar ResizeObserverSPI = function(callback, controller, callbackCtx) {\n    this.activeObservations_ = [];\n    this.observations_ = new MapShim();\n\n    if (typeof callback !== 'function') {\n        throw new TypeError('The callback provided as parameter 1 is not a function.');\n    }\n\n    this.callback_ = callback;\n    this.controller_ = controller;\n    this.callbackCtx_ = callbackCtx;\n};\n\n/**\r\n * Starts observing provided element.\r\n *\r\n * @param {Element} target - Element to be observed.\r\n * @returns {void}\r\n */\n\n\n/**\r\n * Registry of the ResizeObservation instances.\r\n *\r\n * @private {Map<Element, ResizeObservation>}\r\n */\n\n\n/**\r\n * Public ResizeObserver instance which will be passed to the callback\r\n * function and used as a value of it's \"this\" binding.\r\n *\r\n * @private {ResizeObserver}\r\n */\n\n/**\r\n * Collection of resize observations that have detected changes in dimensions\r\n * of elements.\r\n *\r\n * @private {Array<ResizeObservation>}\r\n */\nResizeObserverSPI.prototype.observe = function (target) {\n    if (!arguments.length) {\n        throw new TypeError('1 argument required, but only 0 present.');\n    }\n\n    // Do nothing if current environment doesn't have the Element interface.\n    if (typeof Element === 'undefined' || !(Element instanceof Object)) {\n        return;\n    }\n\n    if (!(target instanceof getWindowOf(target).Element)) {\n        throw new TypeError('parameter 1 is not of type \"Element\".');\n    }\n\n    var observations = this.observations_;\n\n    // Do nothing if element is already being observed.\n    if (observations.has(target)) {\n        return;\n    }\n\n    observations.set(target, new ResizeObservation(target));\n\n    this.controller_.addObserver(this);\n\n    // Force the update of observations.\n    this.controller_.refresh();\n};\n\n/**\r\n * Stops observing provided element.\r\n *\r\n * @param {Element} target - Element to stop observing.\r\n * @returns {void}\r\n */\nResizeObserverSPI.prototype.unobserve = function (target) {\n    if (!arguments.length) {\n        throw new TypeError('1 argument required, but only 0 present.');\n    }\n\n    // Do nothing if current environment doesn't have the Element interface.\n    if (typeof Element === 'undefined' || !(Element instanceof Object)) {\n        return;\n    }\n\n    if (!(target instanceof getWindowOf(target).Element)) {\n        throw new TypeError('parameter 1 is not of type \"Element\".');\n    }\n\n    var observations = this.observations_;\n\n    // Do nothing if element is not being observed.\n    if (!observations.has(target)) {\n        return;\n    }\n\n    observations.delete(target);\n\n    if (!observations.size) {\n        this.controller_.removeObserver(this);\n    }\n};\n\n/**\r\n * Stops observing all elements.\r\n *\r\n * @returns {void}\r\n */\nResizeObserverSPI.prototype.disconnect = function () {\n    this.clearActive();\n    this.observations_.clear();\n    this.controller_.removeObserver(this);\n};\n\n/**\r\n * Collects observation instances the associated element of which has changed\r\n * it's content rectangle.\r\n *\r\n * @returns {void}\r\n */\nResizeObserverSPI.prototype.gatherActive = function () {\n        var this$1 = this;\n\n    this.clearActive();\n\n    this.observations_.forEach(function (observation) {\n        if (observation.isActive()) {\n            this$1.activeObservations_.push(observation);\n        }\n    });\n};\n\n/**\r\n * Invokes initial callback function with a list of ResizeObserverEntry\r\n * instances collected from active resize observations.\r\n *\r\n * @returns {void}\r\n */\nResizeObserverSPI.prototype.broadcastActive = function () {\n    // Do nothing if observer doesn't have active observations.\n    if (!this.hasActive()) {\n        return;\n    }\n\n    var ctx = this.callbackCtx_;\n\n    // Create ResizeObserverEntry instance for every active observation.\n    var entries = this.activeObservations_.map(function (observation) {\n        return new ResizeObserverEntry(observation.target, observation.broadcastRect());\n    });\n\n    this.callback_.call(ctx, entries, ctx);\n    this.clearActive();\n};\n\n/**\r\n * Clears the collection of active observations.\r\n *\r\n * @returns {void}\r\n */\nResizeObserverSPI.prototype.clearActive = function () {\n    this.activeObservations_.splice(0);\n};\n\n/**\r\n * Tells whether observer has active observations.\r\n *\r\n * @returns {boolean}\r\n */\nResizeObserverSPI.prototype.hasActive = function () {\n    return this.activeObservations_.length > 0;\n};\n\n// Registry of internal observers. If WeakMap is not available use current shim\n// for the Map collection as it has all required methods and because WeakMap\n// can't be fully polyfilled anyway.\nvar observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();\n\n/**\r\n * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\r\n * exposing only those methods and properties that are defined in the spec.\r\n */\nvar ResizeObserver = function(callback) {\n    if (!(this instanceof ResizeObserver)) {\n        throw new TypeError('Cannot call a class as a function.');\n    }\n    if (!arguments.length) {\n        throw new TypeError('1 argument required, but only 0 present.');\n    }\n\n    var controller = ResizeObserverController.getInstance();\n    var observer = new ResizeObserverSPI(callback, controller, this);\n\n    observers.set(this, observer);\n};\n\n// Expose public methods of ResizeObserver.\n['observe', 'unobserve', 'disconnect'].forEach(function (method) {\n    ResizeObserver.prototype[method] = function () {\n        return (ref = observers.get(this))[method].apply(ref, arguments);\n        var ref;\n    };\n});\n\nvar index = (function () {\n    // Export existing implementation if available.\n    if (typeof global$1.ResizeObserver !== 'undefined') {\n        return global$1.ResizeObserver;\n    }\n\n    return ResizeObserver;\n})();\n\nexport default index;\n"],"sourceRoot":""}